/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4-windows"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6-windows"

  assign where host.address6
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk-windows"

  vars += config
  
  vars.disk_win_warn = "40%"
  vars.disk_win_crit = "30%"
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"

  check_command = "load-windows"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"
  vars.load_win_warn = "80"
  vars.load_win_crit = "90"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs-windows"

  assign where host.name == NodeName
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap-windows"

  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"

  check_command = "users-windows"

  assign where host.name == NodeName
}

apply Service "RAM" {
  import "generic-service"
    
  check_command = "memory-windows"
    
  vars.memory_win_warn = "20%"
  vars.memory_win_crit = "10%"
    
  assign where host.name == NodeName
}

// Windows service monitoring array
apply Service for ( service_win_service => config in host.vars.win_services) {
  import "generic-service"
  check_command = "service-windows"
  vars += config
  
  assign where host.name == NodeName
}

//RabbitMQ services
apply Service "rabbitmq status" {
  import "generic-service"
    
  check_command = "rabbit_status"
   
  vars.rabbit_user = "admin"
  vars.rabbit_pass = "admin"
  vars.rabbit_host = "localdomain"
  
  assign where host.name == NodeName
}

//RabbitMQ queue services (beta)
apply Service "rabbit queue SolTek.InternalQueueMessages.FlifoMessage:SolTek.InternalQueueMessages_FLIFOConverter" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.FlifoMessage:SolTek.InternalQueueMessages_FLIFOConverter"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.AFlightLegRecordMessage:SolTek.InternalQueueMessages_FlightCacheUpdater" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.AFlightLegRecordMessage:SolTek.InternalQueueMessages_FlightCacheUpdater"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 10
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.AciMessage:SolTek.InternalQueueMessages_ACIConverter" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.AciMessage:SolTek.InternalQueueMessages_ACIConverter"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.AciWarningErrorMessage:SolTek.InternalQueueMessages_AnyApp" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.AciWarningErrorMessage:SolTek.InternalQueueMessages_AnyApp"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.DynamicRoutingSearchRequestMessage:SolTek.InternalQueueMessages" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.DynamicRoutingSearchRequestMessage:SolTek.InternalQueueMessages"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}


apply Service "rabbit queue SolTek.InternalQueueMessages.ESeamlessMessage:SolTek.InternalQueueMessages_FlightInventoryConverter" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.ESeamlessMessage:SolTek.InternalQueueMessages_FlightInventoryConverter"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.ESeamlessWarningErrorMessage:SolTek.InternalQueueMessages_AnyApp" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.ESeamlessWarningErrorMessage:SolTek.InternalQueueMessages_AnyApp"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.EflifoMessage:SolTek.InternalQueueMessages_FLIFOConverter" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.EflifoMessage:SolTek.InternalQueueMessages_FLIFOConverter"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "rabbit queue SolTek.InternalQueueMessages.EtktInfoMessage:SolTek.InternalQueueMessages_PNRCacheUpdater" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.EtktInfoMessage:SolTek.InternalQueueMessages_PNRCacheUpdater"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}

apply Service "SolTek.InternalQueueMessages.PNRSeatInformationMessage:SolTek.InternalQueueMessages_PNRCacheUpdater" {
  import "generic-service"
    
  check_command = "rabbit_queue"
 
  vars.rabbit_user = "admin"
  vars.rabbit_passw = "admin"
  vars.rabbit_queue = "SolTek.InternalQueueMessages.PNRSeatInformationMessage:SolTek.InternalQueueMessages_PNRCacheUpdater"
  vars.rabbit_port = "15672"
  vars.rabbit_vhost = "%2F"
  vars.rabbit_host = "localhost"
  vars.warn_threshold = 7
  vars.crit_threshold = 10
  
  assign where host.name == NodeName
}



